{"ast":null,"code":"import * as echarts from \"echarts\";\nlet pieOptions = {\n  title: {\n    text: '',\n    // 主标题\n    subtext: '',\n    // 副标题\n    left: 'center'\n  },\n  tooltip: {\n    trigger: 'item',\n    formatter: '{a} <br/>{b} : {c} ({d}%)'\n  },\n  legend: {\n    orient: 'vertical',\n    left: 'left'\n  },\n  series: [{\n    name: '',\n    // 鼠标移上去显示内容\n    type: 'pie',\n    radius: '50%',\n    center: ['50%', '60%'],\n    data: [{\n      value: 1048,\n      name: '瑞幸咖啡'\n    },\n    // 示例数据：name表示维度，value表示对应的值\n    {\n      value: 735,\n      name: '雀巢咖啡'\n    }, {\n      value: 580,\n      name: '星巴克咖啡'\n    }, {\n      value: 484,\n      name: '栖巢咖啡'\n    }, {\n      value: 300,\n      name: '小武哥咖啡'\n    }]\n  }]\n};\nlet barOptions = {\n  title: {\n    text: '',\n    // 主标题\n    subtext: '',\n    // 副标题\n    left: 'center'\n  },\n  xAxis: {\n    type: 'category',\n    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n  },\n  yAxis: {\n    type: 'value'\n  },\n  series: [{\n    data: [120, 200, 150, 80, 70, 110, 130],\n    type: 'bar'\n  }]\n};\nlet lineOptions = {\n  title: {\n    text: 'Stacked Line'\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  legend: {\n    data: ['Email', 'Union Ads', 'Video Ads', 'Direct', 'Search Engine']\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  toolbox: {\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  xAxis: {\n    type: 'category',\n    boundaryGap: false,\n    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n  },\n  yAxis: {\n    type: 'value'\n  },\n  series: [{\n    name: 'Email',\n    type: 'line',\n    stack: 'Total',\n    data: [120, 132, 101, 134, 90, 230, 210]\n  }, {\n    name: 'Union Ads',\n    type: 'line',\n    stack: 'Total',\n    data: [220, 182, 191, 234, 290, 330, 310]\n  }, {\n    name: 'Video Ads',\n    type: 'line',\n    stack: 'Total',\n    data: [150, 232, 201, 154, 190, 330, 410]\n  }, {\n    name: 'Direct',\n    type: 'line',\n    stack: 'Total',\n    data: [320, 332, 301, 334, 390, 330, 320]\n  }, {\n    name: 'Search Engine',\n    type: 'line',\n    stack: 'Total',\n    data: [820, 932, 901, 934, 1290, 1330, 1320]\n  }]\n};\nexport default {\n  name: 'Home',\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      notices: [],\n      examplans: [] //新增examplans\n    };\n  },\n\n  created() {\n    this.$request.get('/notice/selectAll').then(res => {\n      this.notices = res.data || []; //页面创建好后，取出数据库notice表里的所有数据，返回到notices中\n    }); //上面<el-timeline-item v-for=\"item in notices\"......就是显示出notices的部分\n    this.$request.get('/examplan/selectAll').then(res => {\n      if (res.code === '200') {\n        this.examplans = res.data || []; //和上面一样，调用examplan/selectAll接口，将数据库中的考试安排数据返回给examplans\n      } else {\n        this.$message.error(res.msg); //对状态码进行判断，如果出错就进行提示 （保险做法\n      }\n    });\n\n    this.getPie();\n    this.getBar();\n    this.getLine();\n  },\n  methods: {\n    getPie() {\n      this.$request.get('/attendance/getPie').then(res => {\n        //去后台定义一个这样的接口来返回数据\n        if (res.code === '200') {\n          let chartDom = document.getElementById('pie');\n          let myChart = echarts.init(chartDom); //在id为pie的位置初始化图表 myChart就是具体会现实的图表\n\n          //再通过pieOptions（就是上面定义过的统计图的数据结构）渲染从后台拿到的数据（res.data）\n          pieOptions.title.text = res.data.text;\n          pieOptions.title.subtext = res.data.subtext;\n          pieOptions.series.name = res.data.name;\n          pieOptions.series[0].data = res.data.data;\n\n          //绑定到myChart上\n          myChart.setOption(pieOptions);\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    getBar() {\n      this.$request.get('/score/getBar').then(res => {\n        //去后台定义一个这样的接口来返回数据\n        if (res.code === '200') {\n          let chartDom = document.getElementById('bar');\n          let myChart = echarts.init(chartDom); //在id为pie的位置初始化图表 myChart就是具体会现实的图表\n\n          //再通过barOptions（就是上面定义过的统计图的数据结构）渲染从后台拿到的数据（res.data）\n          barOptions.title.text = res.data.text;\n          barOptions.title.subtext = res.data.subtext;\n          barOptions.xAxis.data = res.data.xAxis;\n          barOptions.series[0].data = res.data.yAxis;\n\n          //绑定到myChart上\n          myChart.setOption(barOptions);\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    getLine() {\n      this.$request.get('/score/getLine').then(res => {\n        //去后台定义一个这样的接口来返回数据\n        if (res.code === '200') {\n          let chartDom = document.getElementById('line');\n          let myChart = echarts.init(chartDom); //在id为pie的位置初始化图表 myChart就是具体会现实的图表\n\n          //再通过barOptions（就是上面定义过的统计图的数据结构）渲染从后台拿到的数据（res.data）\n          barOptions.title.text = res.data.text;\n          barOptions.title.subtext = res.data.subtext;\n          barOptions.xAxis.data = res.data.xAxis;\n          barOptions.series[0].data = res.data.yAxis;\n\n          //绑定到myChart上\n          myChart.setOption(barOptions);\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["echarts","pieOptions","title","text","subtext","left","tooltip","trigger","formatter","legend","orient","series","name","type","radius","center","data","value","barOptions","xAxis","yAxis","lineOptions","grid","right","bottom","containLabel","toolbox","feature","saveAsImage","boundaryGap","stack","user","JSON","parse","localStorage","getItem","notices","examplans","created","$request","get","then","res","code","$message","error","msg","getPie","getBar","getLine","methods","chartDom","document","getElementById","myChart","init","setOption"],"sources":["src/views/manager/Home.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"card\" style=\"padding: 15px\">\n      您好，{{ user?.name }}！欢迎使用本系统\n    </div>\n\n    <div style=\"display: flex; margin: 10px 0\">\n      <div style=\"width: 50%;\" class=\"card\">\n        <div style=\"margin-bottom: 30px; font-size: 20px; font-weight: bold\">教务通知</div>\n        <div >\n          <el-timeline  reverse slot=\"reference\">\n            <el-timeline-item v-for=\"item in notices\" :key=\"item.id\" :timestamp=\"item.time\">\n              <el-popover\n                  placement=\"right\"\n                  width=\"200\"\n                  trigger=\"hover\"\n                  :content=\"item.content\">\n                <span slot=\"reference\">{{ item.title }}</span>\n              </el-popover>\n            </el-timeline-item>\n          </el-timeline>\n        </div>\n      </div>\n\n      <div style=\"width: 50%;\" class=\"card\">\n        <div style=\"margin-bottom: 30px; font-size: 20px; font-weight: bold\">考试安排</div>\n        <div >\n          <el-timeline  reverse slot=\"reference\">\n            <el-timeline-item v-for=\"item in examplans\" :key=\"item.id\" :timestamp=\"item.time\">\n              <el-popover\n                  placement=\"right\"\n                  width=\"200\"\n                  trigger=\"hover\"\n                  :content=\"item.content\">\n                <span slot=\"reference\">{{ item.name }}</span>\n              </el-popover>\n            </el-timeline-item>\n          </el-timeline>\n        </div>\n      </div>\n\n\n    </div>\n    <div style=\"display: flex\">\n      <div class=\"card\" id=\"pie\" style=\"height: 400px; width: 100%\"></div>\n    </div>\n    <div class=\"card\" id=\"bar\" style=\"height: 400px; width: 100%\"></div>\n    <div class=\"card\" id=\"line\" style=\"height: 400px; width: 100%\"></div>\n\n  </div>\n</template>\n\n<script>\nimport * as echarts from \"echarts\";\nlet pieOptions = {\n  title: {\n    text: '', // 主标题\n    subtext: '', // 副标题\n    left: 'center'\n  },\n  tooltip: {\n    trigger: 'item',\n    formatter: '{a} <br/>{b} : {c} ({d}%)'\n  },\n  legend: {\n    orient: 'vertical',\n    left: 'left'\n  },\n  series: [\n    {\n      name: '', // 鼠标移上去显示内容\n      type: 'pie',\n      radius: '50%',\n      center: ['50%', '60%'],\n      data: [\n        {value: 1048, name: '瑞幸咖啡'}, // 示例数据：name表示维度，value表示对应的值\n        {value: 735, name: '雀巢咖啡'},\n        {value: 580, name: '星巴克咖啡'},\n        {value: 484, name: '栖巢咖啡'},\n        {value: 300, name: '小武哥咖啡'}\n      ]\n    }\n  ]\n}\n\nlet barOptions = {\n  title: {\n    text: '', // 主标题\n    subtext: '', // 副标题\n    left: 'center'\n  },\n  xAxis: {\n    type: 'category',\n    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n  },\n  yAxis: {\n    type: 'value'\n  },\n  series: [\n    {\n      data: [120, 200, 150, 80, 70, 110, 130],\n      type: 'bar'\n    }\n  ]\n}\n\nlet lineOptions = {\n  title: {\n    text: 'Stacked Line'\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  legend: {\n    data: ['Email', 'Union Ads', 'Video Ads', 'Direct', 'Search Engine']\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  toolbox: {\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  xAxis: {\n    type: 'category',\n    boundaryGap: false,\n    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n  },\n  yAxis: {\n    type: 'value'\n  },\n  series: [\n    {\n      name: 'Email',\n      type: 'line',\n      stack: 'Total',\n      data: [120, 132, 101, 134, 90, 230, 210]\n    },\n    {\n      name: 'Union Ads',\n      type: 'line',\n      stack: 'Total',\n      data: [220, 182, 191, 234, 290, 330, 310]\n    },\n    {\n      name: 'Video Ads',\n      type: 'line',\n      stack: 'Total',\n      data: [150, 232, 201, 154, 190, 330, 410]\n    },\n    {\n      name: 'Direct',\n      type: 'line',\n      stack: 'Total',\n      data: [320, 332, 301, 334, 390, 330, 320]\n    },\n    {\n      name: 'Search Engine',\n      type: 'line',\n      stack: 'Total',\n      data: [820, 932, 901, 934, 1290, 1330, 1320]\n    }\n  ]\n};\nexport default {\n  name: 'Home',\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      notices: [],\n      examplans:[] //新增examplans\n    }\n  },\n  created() {\n    this.$request.get('/notice/selectAll').then(res => {\n      this.notices = res.data || [] //页面创建好后，取出数据库notice表里的所有数据，返回到notices中\n    }) //上面<el-timeline-item v-for=\"item in notices\"......就是显示出notices的部分\n    this.$request.get('/examplan/selectAll').then(res=>{\n      if(res.code==='200'){\n        this.examplans=res.data || []  //和上面一样，调用examplan/selectAll接口，将数据库中的考试安排数据返回给examplans\n      }else{\n        this.$message.error(res.msg) //对状态码进行判断，如果出错就进行提示 （保险做法\n      }\n    })\n    this.getPie()\n    this.getBar()\n    this.getLine()\n  },\n  methods :{\n    getPie(){\n      this.$request.get('/attendance/getPie').then(res => {  //去后台定义一个这样的接口来返回数据\n        if (res.code === '200') {\n          let chartDom = document.getElementById('pie');\n          let myChart = echarts.init(chartDom);  //在id为pie的位置初始化图表 myChart就是具体会现实的图表\n\n          //再通过pieOptions（就是上面定义过的统计图的数据结构）渲染从后台拿到的数据（res.data）\n          pieOptions.title.text = res.data.text\n          pieOptions.title.subtext = res.data.subtext\n          pieOptions.series.name = res.data.name\n          pieOptions.series[0].data = res.data.data\n\n          //绑定到myChart上\n          myChart.setOption(pieOptions);\n        } else {\n          this.$message.error(res.msg)\n        }\n      })\n    },\n    getBar(){\n      this.$request.get('/score/getBar').then(res => {  //去后台定义一个这样的接口来返回数据\n        if (res.code === '200') {\n          let chartDom = document.getElementById('bar');\n          let myChart = echarts.init(chartDom);  //在id为pie的位置初始化图表 myChart就是具体会现实的图表\n\n          //再通过barOptions（就是上面定义过的统计图的数据结构）渲染从后台拿到的数据（res.data）\n          barOptions.title.text = res.data.text\n          barOptions.title.subtext = res.data.subtext\n          barOptions.xAxis.data = res.data.xAxis\n          barOptions.series[0].data = res.data.yAxis\n\n          //绑定到myChart上\n          myChart.setOption(barOptions);\n        } else {\n          this.$message.error(res.msg)\n        }\n      })\n\n    },\n    getLine(){\n      this.$request.get('/score/getLine').then(res => {  //去后台定义一个这样的接口来返回数据\n        if (res.code === '200') {\n          let chartDom = document.getElementById('line');\n          let myChart = echarts.init(chartDom);  //在id为pie的位置初始化图表 myChart就是具体会现实的图表\n\n          //再通过barOptions（就是上面定义过的统计图的数据结构）渲染从后台拿到的数据（res.data）\n          barOptions.title.text = res.data.text\n          barOptions.title.subtext = res.data.subtext\n          barOptions.xAxis.data = res.data.xAxis\n          barOptions.series[0].data = res.data.yAxis\n\n          //绑定到myChart上\n          myChart.setOption(barOptions);\n        } else {\n          this.$message.error(res.msg)\n        }\n      })\n    }\n  }\n}\n</script>\n"],"mappings":"AAqDA,YAAAA,OAAA;AACA,IAAAC,UAAA;EACAC,KAAA;IACAC,IAAA;IAAA;IACAC,OAAA;IAAA;IACAC,IAAA;EACA;EACAC,OAAA;IACAC,OAAA;IACAC,SAAA;EACA;EACAC,MAAA;IACAC,MAAA;IACAL,IAAA;EACA;EACAM,MAAA,GACA;IACAC,IAAA;IAAA;IACAC,IAAA;IACAC,MAAA;IACAC,MAAA;IACAC,IAAA,GACA;MAAAC,KAAA;MAAAL,IAAA;IAAA;IAAA;IACA;MAAAK,KAAA;MAAAL,IAAA;IAAA,GACA;MAAAK,KAAA;MAAAL,IAAA;IAAA,GACA;MAAAK,KAAA;MAAAL,IAAA;IAAA,GACA;MAAAK,KAAA;MAAAL,IAAA;IAAA;EAEA;AAEA;AAEA,IAAAM,UAAA;EACAhB,KAAA;IACAC,IAAA;IAAA;IACAC,OAAA;IAAA;IACAC,IAAA;EACA;EACAc,KAAA;IACAN,IAAA;IACAG,IAAA;EACA;EACAI,KAAA;IACAP,IAAA;EACA;EACAF,MAAA,GACA;IACAK,IAAA;IACAH,IAAA;EACA;AAEA;AAEA,IAAAQ,WAAA;EACAnB,KAAA;IACAC,IAAA;EACA;EACAG,OAAA;IACAC,OAAA;EACA;EACAE,MAAA;IACAO,IAAA;EACA;EACAM,IAAA;IACAjB,IAAA;IACAkB,KAAA;IACAC,MAAA;IACAC,YAAA;EACA;EACAC,OAAA;IACAC,OAAA;MACAC,WAAA;IACA;EACA;EACAT,KAAA;IACAN,IAAA;IACAgB,WAAA;IACAb,IAAA;EACA;EACAI,KAAA;IACAP,IAAA;EACA;EACAF,MAAA,GACA;IACAC,IAAA;IACAC,IAAA;IACAiB,KAAA;IACAd,IAAA;EACA,GACA;IACAJ,IAAA;IACAC,IAAA;IACAiB,KAAA;IACAd,IAAA;EACA,GACA;IACAJ,IAAA;IACAC,IAAA;IACAiB,KAAA;IACAd,IAAA;EACA,GACA;IACAJ,IAAA;IACAC,IAAA;IACAiB,KAAA;IACAd,IAAA;EACA,GACA;IACAJ,IAAA;IACAC,IAAA;IACAiB,KAAA;IACAd,IAAA;EACA;AAEA;AACA;EACAJ,IAAA;EACAI,KAAA;IACA;MACAe,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,OAAA;MACAC,SAAA;IACA;EACA;;EACAC,QAAA;IACA,KAAAC,QAAA,CAAAC,GAAA,sBAAAC,IAAA,CAAAC,GAAA;MACA,KAAAN,OAAA,GAAAM,GAAA,CAAA1B,IAAA;IACA;IACA,KAAAuB,QAAA,CAAAC,GAAA,wBAAAC,IAAA,CAAAC,GAAA;MACA,IAAAA,GAAA,CAAAC,IAAA;QACA,KAAAN,SAAA,GAAAK,GAAA,CAAA1B,IAAA;MACA;QACA,KAAA4B,QAAA,CAAAC,KAAA,CAAAH,GAAA,CAAAI,GAAA;MACA;IACA;;IACA,KAAAC,MAAA;IACA,KAAAC,MAAA;IACA,KAAAC,OAAA;EACA;EACAC,OAAA;IACAH,OAAA;MACA,KAAAR,QAAA,CAAAC,GAAA,uBAAAC,IAAA,CAAAC,GAAA;QAAA;QACA,IAAAA,GAAA,CAAAC,IAAA;UACA,IAAAQ,QAAA,GAAAC,QAAA,CAAAC,cAAA;UACA,IAAAC,OAAA,GAAAtD,OAAA,CAAAuD,IAAA,CAAAJ,QAAA;;UAEA;UACAlD,UAAA,CAAAC,KAAA,CAAAC,IAAA,GAAAuC,GAAA,CAAA1B,IAAA,CAAAb,IAAA;UACAF,UAAA,CAAAC,KAAA,CAAAE,OAAA,GAAAsC,GAAA,CAAA1B,IAAA,CAAAZ,OAAA;UACAH,UAAA,CAAAU,MAAA,CAAAC,IAAA,GAAA8B,GAAA,CAAA1B,IAAA,CAAAJ,IAAA;UACAX,UAAA,CAAAU,MAAA,IAAAK,IAAA,GAAA0B,GAAA,CAAA1B,IAAA,CAAAA,IAAA;;UAEA;UACAsC,OAAA,CAAAE,SAAA,CAAAvD,UAAA;QACA;UACA,KAAA2C,QAAA,CAAAC,KAAA,CAAAH,GAAA,CAAAI,GAAA;QACA;MACA;IACA;IACAE,OAAA;MACA,KAAAT,QAAA,CAAAC,GAAA,kBAAAC,IAAA,CAAAC,GAAA;QAAA;QACA,IAAAA,GAAA,CAAAC,IAAA;UACA,IAAAQ,QAAA,GAAAC,QAAA,CAAAC,cAAA;UACA,IAAAC,OAAA,GAAAtD,OAAA,CAAAuD,IAAA,CAAAJ,QAAA;;UAEA;UACAjC,UAAA,CAAAhB,KAAA,CAAAC,IAAA,GAAAuC,GAAA,CAAA1B,IAAA,CAAAb,IAAA;UACAe,UAAA,CAAAhB,KAAA,CAAAE,OAAA,GAAAsC,GAAA,CAAA1B,IAAA,CAAAZ,OAAA;UACAc,UAAA,CAAAC,KAAA,CAAAH,IAAA,GAAA0B,GAAA,CAAA1B,IAAA,CAAAG,KAAA;UACAD,UAAA,CAAAP,MAAA,IAAAK,IAAA,GAAA0B,GAAA,CAAA1B,IAAA,CAAAI,KAAA;;UAEA;UACAkC,OAAA,CAAAE,SAAA,CAAAtC,UAAA;QACA;UACA,KAAA0B,QAAA,CAAAC,KAAA,CAAAH,GAAA,CAAAI,GAAA;QACA;MACA;IAEA;IACAG,QAAA;MACA,KAAAV,QAAA,CAAAC,GAAA,mBAAAC,IAAA,CAAAC,GAAA;QAAA;QACA,IAAAA,GAAA,CAAAC,IAAA;UACA,IAAAQ,QAAA,GAAAC,QAAA,CAAAC,cAAA;UACA,IAAAC,OAAA,GAAAtD,OAAA,CAAAuD,IAAA,CAAAJ,QAAA;;UAEA;UACAjC,UAAA,CAAAhB,KAAA,CAAAC,IAAA,GAAAuC,GAAA,CAAA1B,IAAA,CAAAb,IAAA;UACAe,UAAA,CAAAhB,KAAA,CAAAE,OAAA,GAAAsC,GAAA,CAAA1B,IAAA,CAAAZ,OAAA;UACAc,UAAA,CAAAC,KAAA,CAAAH,IAAA,GAAA0B,GAAA,CAAA1B,IAAA,CAAAG,KAAA;UACAD,UAAA,CAAAP,MAAA,IAAAK,IAAA,GAAA0B,GAAA,CAAA1B,IAAA,CAAAI,KAAA;;UAEA;UACAkC,OAAA,CAAAE,SAAA,CAAAtC,UAAA;QACA;UACA,KAAA0B,QAAA,CAAAC,KAAA,CAAAH,GAAA,CAAAI,GAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}