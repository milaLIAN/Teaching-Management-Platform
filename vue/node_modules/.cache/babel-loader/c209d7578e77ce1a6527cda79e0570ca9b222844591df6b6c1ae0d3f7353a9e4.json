{"ast":null,"code":"import * as echarts from 'echarts';\nexport default {\n  name: \"Analysis\",\n  data() {\n    return {\n      tableData: [],\n      pageNum: 1,\n      pageSize: 10,\n      total: 0,\n      form: {},\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      ids: [],\n      courseData: [],\n      courseId: 1,\n      distributionData: [] // Add this line\n    };\n  },\n\n  created() {\n    this.load(1);\n    this.loadCourse();\n    this.loadAverageScores();\n    this.loadDistributionByClass(); // Add this line\n  },\n\n  methods: {\n    loadCourse() {\n      this.$request.get('/course/selectAll').then(res => {\n        if (res.code === '200') {\n          this.courseData = res.data;\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    loadAverageScores() {\n      if (this.user.role !== 'ADMIN') return;\n      this.$request.get('/score/average-by-class', {\n        params: {\n          courseId: this.courseId\n        }\n      }).then(res => {\n        if (res.code === '200') {\n          res.data.sort((a, b) => a.class_name.localeCompare(b.class_name));\n          this.renderChart('average-score-chart', '各班级平均分折线图', res.data.map(item => item.class_name), [{\n            name: '平均分',\n            type: 'line',\n            data: res.data.map(item => item.avg_score)\n          }]);\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    loadDistributionByClass() {\n      // Add this method\n      if (this.user.role !== 'ADMIN') return;\n      this.$request.get('/score/distribution-by-class', {\n        params: {\n          courseId: this.courseId\n        }\n      }).then(res => {\n        if (res.code === '200') {\n          this.distributionData = res.data;\n          const classNames = this.distributionData.map(item => this.getClassNameById(item.classId));\n          const seriesData = [{\n            name: '优秀',\n            type: 'bar',\n            data: this.distributionData.map(item => item.excellent)\n          }, {\n            name: '良好',\n            type: 'bar',\n            data: this.distributionData.map(item => item.good)\n          }, {\n            name: '中等',\n            type: 'bar',\n            data: this.distributionData.map(item => item.average)\n          }, {\n            name: '及格',\n            type: 'bar',\n            data: this.distributionData.map(item => item.pass)\n          }, {\n            name: '不及格',\n            type: 'bar',\n            data: this.distributionData.map(item => item.fail)\n          }];\n          this.renderChart('distribution-chart', '各班级成绩分布图', classNames, seriesData);\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    getClassNameById(classId) {\n      const classItem = this.courseData.find(item => item.id === classId);\n      return classItem ? classItem.name : '';\n    },\n    renderChart(chartId, title, xData, seriesData) {\n      const chart = echarts.init(document.getElementById(chartId));\n      const option = {\n        title: {\n          text: title\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        legend: {\n          data: seriesData.map(s => s.name)\n        },\n        xAxis: {\n          type: 'category',\n          data: xData\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: seriesData\n      };\n      chart.setOption(option);\n    },\n    load() {\n      this.loadAverageScores();\n      this.loadDistributionByClass(); // Add this line\n    },\n\n    reset() {\n      this.courseId = 1;\n      this.loadAverageScores();\n      this.loadDistributionByClass(); // Add this line\n    },\n\n    handleCurrentChange(pageNum) {\n      this.load(pageNum);\n    }\n  }\n};","map":{"version":3,"names":["echarts","name","data","tableData","pageNum","pageSize","total","form","user","JSON","parse","localStorage","getItem","ids","courseData","courseId","distributionData","created","load","loadCourse","loadAverageScores","loadDistributionByClass","methods","$request","get","then","res","code","$message","error","msg","role","params","sort","a","b","class_name","localeCompare","renderChart","map","item","type","avg_score","classNames","getClassNameById","classId","seriesData","excellent","good","average","pass","fail","classItem","find","id","chartId","title","xData","chart","init","document","getElementById","option","text","tooltip","trigger","legend","s","xAxis","yAxis","series","setOption","reset","handleCurrentChange"],"sources":["src/views/manager/Analysis.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"search\" v-if=\"user.role !== 'STUDENT'\">\r\n      <el-select v-model=\"courseId\" placeholder=\"请选择课程\" style=\"width: 200px\">\r\n        <el-option v-for=\"item in courseData\" :label=\"item.name\" :value=\"item.id\"></el-option>\r\n      </el-select>\r\n      <el-button type=\"info\" plain style=\"margin-left: 10px\" @click=\"load()\">查询</el-button> <!--调用了load方法-->\r\n      <el-button type=\"warning\" plain style=\"margin-left: 10px\" @click=\"reset\">重置</el-button>\r\n    </div>\r\n\r\n\r\n    <div class=\"table\" v-if=\"user.role === 'ADMIN'\">\r\n      <div id=\"average-score-chart\" style=\"width: 100%; height: 400px;\"  ></div>\r\n      <div id=\"distribution-chart\" style=\"width: 100%; height: 400px;\"></div>\r\n\r\n    </div>\r\n\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\nexport default {\r\n  name: \"Analysis\",\r\n  data() {\r\n    return {\r\n      tableData: [],\r\n      pageNum: 1,\r\n      pageSize: 10,\r\n      total: 0,\r\n      form: {},\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      ids: [],\r\n      courseData: [],\r\n      courseId: 1,\r\n      distributionData: []  // Add this line\r\n    }\r\n  },\r\n  created() {\r\n    this.load(1);\r\n    this.loadCourse();\r\n    this.loadAverageScores();\r\n    this.loadDistributionByClass(); // Add this line\r\n  },\r\n  methods: {\r\n    loadCourse() {\r\n      this.$request.get('/course/selectAll').then(res => {\r\n        if (res.code === '200') {\r\n          this.courseData = res.data;\r\n        } else {\r\n          this.$message.error(res.msg);\r\n        }\r\n      });\r\n    },\r\n    loadAverageScores() {\r\n      if (this.user.role !== 'ADMIN') return;\r\n      this.$request.get('/score/average-by-class', {\r\n        params: {\r\n          courseId: this.courseId\r\n        }\r\n      }).then(res => {\r\n        if (res.code === '200') {\r\n          res.data.sort((a, b) => a.class_name.localeCompare(b.class_name));\r\n          this.renderChart('average-score-chart', '各班级平均分折线图', res.data.map(item => item.class_name), [{\r\n            name: '平均分',\r\n            type: 'line',\r\n            data: res.data.map(item => item.avg_score)\r\n          }]);\r\n        } else {\r\n          this.$message.error(res.msg);\r\n        }\r\n      });\r\n    },\r\n    loadDistributionByClass() {  // Add this method\r\n      if (this.user.role !== 'ADMIN') return;\r\n      this.$request.get('/score/distribution-by-class', {\r\n        params: {\r\n          courseId: this.courseId\r\n        }\r\n      }).then(res => {\r\n        if (res.code === '200') {\r\n          this.distributionData = res.data;\r\n          const classNames = this.distributionData.map(item => this.getClassNameById(item.classId));\r\n          const seriesData = [\r\n            { name: '优秀', type: 'bar', data: this.distributionData.map(item => item.excellent) },\r\n            { name: '良好', type: 'bar', data: this.distributionData.map(item => item.good) },\r\n            { name: '中等', type: 'bar', data: this.distributionData.map(item => item.average) },\r\n            { name: '及格', type: 'bar', data: this.distributionData.map(item => item.pass) },\r\n            { name: '不及格', type: 'bar', data: this.distributionData.map(item => item.fail) }\r\n          ];\r\n          this.renderChart('distribution-chart', '各班级成绩分布图', classNames, seriesData);\r\n        } else {\r\n          this.$message.error(res.msg);\r\n        }\r\n      });\r\n    },\r\n    getClassNameById(classId) {\r\n      const classItem = this.courseData.find(item => item.id === classId);\r\n      return classItem ? classItem.name : '';\r\n    },\r\n    renderChart(chartId, title, xData, seriesData) {\r\n      const chart = echarts.init(document.getElementById(chartId));\r\n      const option = {\r\n        title: { text: title },\r\n        tooltip: { trigger: 'axis' },\r\n        legend: { data: seriesData.map(s => s.name) },\r\n        xAxis: { type: 'category', data: xData },\r\n        yAxis: { type: 'value' },\r\n        series: seriesData\r\n      };\r\n      chart.setOption(option);\r\n    },\r\n    load() {\r\n      this.loadAverageScores();\r\n      this.loadDistributionByClass();  // Add this line\r\n    },\r\n    reset() {\r\n      this.courseId = 1;\r\n      this.loadAverageScores();\r\n      this.loadDistributionByClass();  // Add this line\r\n    },\r\n    handleCurrentChange(pageNum) {\r\n      this.load(pageNum);\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}