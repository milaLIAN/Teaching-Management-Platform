{"ast":null,"code":"import * as echarts from 'echarts';\nexport default {\n  name: \"Analysis\",\n  data() {\n    return {\n      //页面中所有变量都放在这里\n      tableData: [],\n      // 所有的数据\n      pageNum: 1,\n      // 当前的页码\n      pageSize: 10,\n      // 每页显示的个数\n      total: 0,\n      title: null,\n      fromVisible: false,\n      //新增弹窗一开始是不可见的\n      form: {},\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {\n        title: [{\n          required: true,\n          message: '请输入标题',\n          trigger: 'blur'\n        }],\n        content: [{\n          required: true,\n          message: '请输入内容',\n          trigger: 'blur'\n        }]\n      },\n      ids: [],\n      courseData: [],\n      courseId: 1 // 默认传入的courseId为1\n    };\n  },\n\n  created() {\n    this.load(1); //页面创建完后调用的方法，请求显示第一页的数据\n    this.loadCourse();\n  },\n  methods: {\n    loadCourse() {\n      //教师只能新增自己任教的课程的成绩，所以用params插入teacherId参数作为/course/selectAll的查询条件\n      //0523：这里我要改成录入成绩只由管理员完成，所以不需要传入teacherID了\n      this.$request.get('/course/selectAll'\n      //   params:{\n      //     teacherId:this.user.role==='TEACHER'?this.user.id:null}\n      // }\n      ).then(res => {\n        if (res.code === '200') {\n          this.courseData = res.data;\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    handleAdd() {\n      // 新增数据\n      this.form = {}; // 新增数据的时候清空数据\n      this.fromVisible = true; // 将弹窗的fromVisible属性设为true 即可见\n    },\n\n    handleEdit(row) {\n      // 编辑数据\n      this.form = JSON.parse(JSON.stringify(row)); // 给form对象赋值  注意要深拷贝数据 效果是将内容显示在输入框中\n      this.fromVisible = true; // 打开弹窗\n    },\n\n    save() {\n      // 保存按钮触发的逻辑  它会触发新增或者更新\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.$request({\n            url: this.form.id ? '/notice/update' : '/notice/add',\n            //判断表单有没有id，如果有就是编辑，如果没有就是新增\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {\n              // 表示成功保存\n              this.$message.success('保存成功');\n              this.load(1);\n              this.fromVisible = false;\n            } else {\n              this.$message.error(res.msg); // 弹出错误的信息\n            }\n          });\n        }\n      });\n    },\n\n    del(id) {\n      // 单个删除\n      this.$confirm('您确定删除吗？', '确认删除', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/notice/delete/' + id).then(res => {\n          //把id传给后台 即通过访问notice/delete/id这个url调用通过id删除的方法\n          if (res.code === '200') {\n            // 表示操作成功\n            this.$message.success('操作成功');\n            this.load(1);\n          } else {\n            this.$message.error(res.msg); // 弹出错误的信息\n          }\n        });\n      }).catch(() => {});\n    },\n    handleSelectionChange(rows) {\n      // 当前选中的所有的行数据\n      this.ids = rows.map(v => v.id); // ids是一个数组 这里是将复选中的所有id值赋值到数组中 如 [1,2]\n    },\n\n    delBatch() {\n      // 批量删除\n      if (!this.ids.length) {\n        this.$message.warning('请选择数据');\n        return;\n      }\n      this.$confirm('您确定批量删除这些数据吗？', '确认删除', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/notice/delete/batch', {\n          data: this.ids\n        }).then(res => {\n          if (res.code === '200') {\n            // 表示操作成功\n            this.$message.success('操作成功');\n            this.load(1);\n          } else {\n            this.$message.error(res.msg); // 弹出错误的信息\n          }\n        });\n      }).catch(() => {});\n    },\n    load(pageNum) {\n      // 分页查询 通过输入页数来获取分页的数据\n      if (pageNum) this.pageNum = pageNum;\n      this.$request.get('/notice/selectPage', {\n        //selectPage是NoticeService里的接口\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          title: this.title\n        }\n      }).then(res => {\n        this.tableData = res.data?.list;\n        this.total = res.data?.total;\n      });\n    },\n    reset() {\n      //重置方法（查询旁边的按钮）清空输入框，返回第一页\n      this.title = null;\n      this.load(1);\n    },\n    handleCurrentChange(pageNum) {\n      this.load(pageNum);\n    }\n  }\n};","map":{"version":3,"names":["echarts","name","data","tableData","pageNum","pageSize","total","title","fromVisible","form","user","JSON","parse","localStorage","getItem","rules","required","message","trigger","content","ids","courseData","courseId","created","load","loadCourse","methods","$request","get","then","res","code","$message","error","msg","handleAdd","handleEdit","row","stringify","save","$refs","formRef","validate","valid","url","id","method","success","del","$confirm","type","response","delete","catch","handleSelectionChange","rows","map","v","delBatch","length","warning","params","list","reset","handleCurrentChange"],"sources":["src/views/manager/Analysis.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"search\">\r\n      <el-select v-model=\"courseId\" placeholder=\"请选择课程\" style=\"width: 200px\">\r\n        <el-option v-for=\"item in courseData\" :label=\"item.name\" :value=\"item.id\"></el-option>\r\n      </el-select>\r\n      <el-button type=\"info\" plain style=\"margin-left: 10px\" @click=\"load(1)\">查询</el-button> <!--调用了load方法-->\r\n      <el-button type=\"warning\" plain style=\"margin-left: 10px\" @click=\"reset\">重置</el-button>\r\n    </div>\r\n\r\n\r\n\r\n    <div class=\"table\">\r\n      <div id=\"average-score-chart\" style=\"width: 100%; height: 400px;\"></div>\r\n    </div>\r\n\r\n\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\nexport default {\r\n  name: \"Analysis\",\r\n  data() {\r\n    return {  //页面中所有变量都放在这里\r\n      tableData: [],  // 所有的数据\r\n      pageNum: 1,   // 当前的页码\r\n      pageSize: 10,  // 每页显示的个数\r\n      total: 0,\r\n      title: null,\r\n      fromVisible: false, //新增弹窗一开始是不可见的\r\n      form: {},\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      rules: {\r\n        title: [\r\n          {required: true, message: '请输入标题', trigger: 'blur'},\r\n        ],\r\n        content: [\r\n          {required: true, message: '请输入内容', trigger: 'blur'},\r\n        ]\r\n      },\r\n      ids: [],\r\n      courseData: [],\r\n      courseId: 1  // 默认传入的courseId为1\r\n    }\r\n  },\r\n  created() {\r\n    this.load(1)  //页面创建完后调用的方法，请求显示第一页的数据\r\n    this.loadCourse()\r\n    \r\n  },\r\n  methods: {\r\n    loadCourse() { //教师只能新增自己任教的课程的成绩，所以用params插入teacherId参数作为/course/selectAll的查询条件\r\n      //0523：这里我要改成录入成绩只由管理员完成，所以不需要传入teacherID了\r\n      this.$request.get('/course/selectAll'\r\n          //   params:{\r\n          //     teacherId:this.user.role==='TEACHER'?this.user.id:null}\r\n          // }\r\n      ).then(res => {\r\n        if (res.code === '200') {\r\n          this.courseData = res.data\r\n        } else {\r\n          this.$message.error(res.msg)\r\n        }\r\n      })\r\n    },\r\n    handleAdd() {   // 新增数据\r\n      this.form = {}  // 新增数据的时候清空数据\r\n      this.fromVisible = true   // 将弹窗的fromVisible属性设为true 即可见\r\n    },\r\n    handleEdit(row) {   // 编辑数据\r\n      this.form = JSON.parse(JSON.stringify(row))  // 给form对象赋值  注意要深拷贝数据 效果是将内容显示在输入框中\r\n      this.fromVisible = true   // 打开弹窗\r\n    },\r\n    save() {   // 保存按钮触发的逻辑  它会触发新增或者更新\r\n      this.$refs.formRef.validate((valid) => {\r\n        if (valid) {\r\n          this.$request({\r\n            url: this.form.id ? '/notice/update' : '/notice/add', //判断表单有没有id，如果有就是编辑，如果没有就是新增\r\n            method: this.form.id ? 'PUT' : 'POST',\r\n            data: this.form\r\n          }).then(res => {\r\n            if (res.code === '200') {  // 表示成功保存\r\n              this.$message.success('保存成功')\r\n              this.load(1)\r\n              this.fromVisible = false\r\n            } else {\r\n              this.$message.error(res.msg)  // 弹出错误的信息\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    del(id) {   // 单个删除\r\n      this.$confirm('您确定删除吗？', '确认删除', {type: \"warning\"}).then(response => {\r\n        this.$request.delete('/notice/delete/' + id).then(res => { //把id传给后台 即通过访问notice/delete/id这个url调用通过id删除的方法\r\n          if (res.code === '200') {   // 表示操作成功\r\n            this.$message.success('操作成功')\r\n            this.load(1)\r\n          } else {\r\n            this.$message.error(res.msg)  // 弹出错误的信息\r\n          }\r\n        })\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    handleSelectionChange(rows) {   // 当前选中的所有的行数据\r\n      this.ids = rows.map(v => v.id)   // ids是一个数组 这里是将复选中的所有id值赋值到数组中 如 [1,2]\r\n    },\r\n    delBatch() {   // 批量删除\r\n      if (!this.ids.length) {\r\n        this.$message.warning('请选择数据')\r\n        return\r\n      }\r\n      this.$confirm('您确定批量删除这些数据吗？', '确认删除', {type: \"warning\"}).then(response => {\r\n        this.$request.delete('/notice/delete/batch', {data: this.ids}).then(res => {\r\n          if (res.code === '200') {   // 表示操作成功\r\n            this.$message.success('操作成功')\r\n            this.load(1)\r\n          } else {\r\n            this.$message.error(res.msg)  // 弹出错误的信息\r\n          }\r\n        })\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    load(pageNum) {  // 分页查询 通过输入页数来获取分页的数据\r\n      if (pageNum) this.pageNum = pageNum\r\n      this.$request.get('/notice/selectPage', { //selectPage是NoticeService里的接口\r\n        params: {\r\n          pageNum: this.pageNum,\r\n          pageSize: this.pageSize,\r\n          title: this.title,\r\n        }\r\n      }).then(res => {\r\n        this.tableData = res.data?.list\r\n        this.total = res.data?.total\r\n      })\r\n    },\r\n    reset() { //重置方法（查询旁边的按钮）清空输入框，返回第一页\r\n      this.title = null\r\n      this.load(1)\r\n    },\r\n    handleCurrentChange(pageNum) {\r\n      this.load(pageNum)\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}