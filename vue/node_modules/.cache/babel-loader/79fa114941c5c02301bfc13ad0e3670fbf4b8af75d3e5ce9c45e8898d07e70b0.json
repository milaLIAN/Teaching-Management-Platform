{"ast":null,"code":"import * as echarts from 'echarts';\nexport default {\n  name: \"Analysis\",\n  data() {\n    return {\n      //页面中所有变量都放在这里\n      tableData: [],\n      // 所有的数据\n      pageNum: 1,\n      // 当前的页码\n      pageSize: 10,\n      // 每页显示的个数\n      total: 0,\n      form: {},\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      ids: [],\n      courseData: [],\n      courseId: 1,\n      // 默认传入的courseId为1\n      distributionData: [] // 用于存储成绩分布数据\n    };\n  },\n\n  created() {\n    this.load(1); //页面创建完后调用的方法，请求显示第一页的数据\n    this.loadCourse();\n    this.loadAverageScores();\n    this.loadDistributionByClass();\n  },\n  methods: {\n    loadCourse() {\n      //教师只能新增自己任教的课程的成绩，所以用params插入teacherId参数作为/course/selectAll的查询条件\n      //0523：这里我要改成录入成绩只由管理员完成，所以不需要传入teacherID了\n      this.$request.get('/course/selectAll'\n      //   params:{\n      //     teacherId:this.user.role==='TEACHER'?this.user.id:null}\n      // }\n      ).then(res => {\n        if (res.code === '200') {\n          this.courseData = res.data;\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    loadDistributionData() {\n      this.$request.get('/score/distribution-by-class', {\n        params: {\n          courseId: this.courseId\n        }\n      }).then(res => {\n        if (res.code === '200') {\n          this.distributionData = res.data;\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    loadAverageScores() {\n      if (this.user.role !== 'ADMIN') return; // 确保只有管理员调用此方法\n      this.$request.get('/score/average-by-class', {\n        params: {\n          courseId: this.courseId\n        }\n      }).then(res => {\n        if (res.code === '200') {\n          // 按班级名称进行排序\n          res.data.sort((a, b) => a.class_name.localeCompare(b.class_name));\n          this.renderChart(res.data);\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    loadDistributionByClass() {\n      // Add this method\n      if (this.user.role !== 'ADMIN') return;\n      this.$request.get('/score/distribution-by-class', {\n        params: {\n          courseId: this.courseId\n        }\n      }).then(res => {\n        if (res.code === '200') {\n          this.distributionData = res.data;\n          const classNames = this.distributionData.map(item => this.getClassNameById(item.classId));\n          const seriesData = [{\n            name: '优秀',\n            type: 'bar',\n            data: this.distributionData.map(item => item.excellent)\n          }, {\n            name: '良好',\n            type: 'bar',\n            data: this.distributionData.map(item => item.good)\n          }, {\n            name: '中等',\n            type: 'bar',\n            data: this.distributionData.map(item => item.average)\n          }, {\n            name: '及格',\n            type: 'bar',\n            data: this.distributionData.map(item => item.pass)\n          }, {\n            name: '不及格',\n            type: 'bar',\n            data: this.distributionData.map(item => item.fail)\n          }];\n          this.renderChart('distribution-chart', '各班级成绩分布图', classNames, seriesData);\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    getClassNameById(classId) {\n      const classItem = this.courseData.find(item => item.id === classId);\n      return classItem ? classItem.name : '';\n    },\n    renderChart(chartId, title, xData, seriesData) {\n      const chart = echarts.init(document.getElementById(chartId));\n      const option = {\n        title: {\n          text: title\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        legend: {\n          data: seriesData.map(s => s.name)\n        },\n        xAxis: {\n          type: 'category',\n          data: xData\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: seriesData\n      };\n      chart.setOption(option);\n    },\n    load() {\n      // 分页查询 通过输入页数来获取分页的数据\n      this.loadAverageScores(); // 查询按钮点击后加载对应课程的平均分图表数据\n      this.loadDistributionData(); // 加载成绩分布数据\n    },\n\n    reset() {\n      //重置方法（查询旁边的按钮）清空输入框，返回第一页\n      this.courseId = 1; // 重置为默认的courseId\n      this.loadAverageScores(); // 重新加载默认的图表数据\n      this.loadDistributionData(); // 重置时重新加载成绩分布数据\n    },\n\n    handleCurrentChange(pageNum) {\n      this.load(pageNum);\n    }\n  }\n};","map":{"version":3,"names":["echarts","name","data","tableData","pageNum","pageSize","total","form","user","JSON","parse","localStorage","getItem","ids","courseData","courseId","distributionData","created","load","loadCourse","loadAverageScores","loadDistributionByClass","methods","$request","get","then","res","code","$message","error","msg","loadDistributionData","params","role","sort","a","b","class_name","localeCompare","renderChart","classNames","map","item","getClassNameById","classId","seriesData","type","excellent","good","average","pass","fail","classItem","find","id","chartId","title","xData","chart","init","document","getElementById","option","text","tooltip","trigger","legend","s","xAxis","yAxis","series","setOption","reset","handleCurrentChange"],"sources":["src/views/manager/Analysis.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"search\" v-if=\"user.role !== 'STUDENT'\">\r\n      <el-select v-model=\"courseId\" placeholder=\"请选择课程\" style=\"width: 200px\">\r\n        <el-option v-for=\"item in courseData\" :label=\"item.name\" :value=\"item.id\"></el-option>\r\n      </el-select>\r\n      <el-button type=\"info\" plain style=\"margin-left: 10px\" @click=\"load()\">查询</el-button> <!--调用了load方法-->\r\n      <el-button type=\"warning\" plain style=\"margin-left: 10px\" @click=\"reset\">重置</el-button>\r\n    </div>\r\n\r\n\r\n    <div class=\"table\" v-if=\"user.role === 'ADMIN'\">\r\n      <div id=\"average-score-chart\" style=\"width: 100%; height: 400px;\"  ></div>\r\n      <div id=\"distribution-chart\" style=\"width: 100%; height: 400px;\"></div>\r\n\r\n    </div>\r\n\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\nexport default {\r\n  name: \"Analysis\",\r\n  data() {\r\n    return {  //页面中所有变量都放在这里\r\n      tableData: [],  // 所有的数据\r\n      pageNum: 1,   // 当前的页码\r\n      pageSize: 10,  // 每页显示的个数\r\n      total: 0,\r\n\r\n      form: {},\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      ids: [],\r\n      courseData: [],\r\n      courseId: 1 , // 默认传入的courseId为1\r\n      distributionData: []  // 用于存储成绩分布数据\r\n    }\r\n  },\r\n  created() {\r\n    this.load(1)  //页面创建完后调用的方法，请求显示第一页的数据\r\n    this.loadCourse()\r\n    this.loadAverageScores()\r\n    this.loadDistributionByClass()\r\n  },\r\n  methods: {\r\n    loadCourse() { //教师只能新增自己任教的课程的成绩，所以用params插入teacherId参数作为/course/selectAll的查询条件\r\n      //0523：这里我要改成录入成绩只由管理员完成，所以不需要传入teacherID了\r\n      this.$request.get('/course/selectAll'\r\n          //   params:{\r\n          //     teacherId:this.user.role==='TEACHER'?this.user.id:null}\r\n          // }\r\n      ).then(res => {\r\n        if (res.code === '200') {\r\n          this.courseData = res.data\r\n        } else {\r\n          this.$message.error(res.msg)\r\n        }\r\n      })\r\n    },\r\n    loadDistributionData() {\r\n      this.$request.get('/score/distribution-by-class', {\r\n        params: {\r\n          courseId: this.courseId\r\n        }\r\n      }).then(res => {\r\n        if (res.code === '200') {\r\n          this.distributionData = res.data;\r\n        } else {\r\n          this.$message.error(res.msg);\r\n        }\r\n      });\r\n    },\r\n    loadAverageScores() {\r\n      if (this.user.role !== 'ADMIN') return;  // 确保只有管理员调用此方法\r\n      this.$request.get('/score/average-by-class', {\r\n        params: {\r\n          courseId: this.courseId\r\n        }\r\n      }).then(res => {\r\n        if (res.code === '200') {\r\n          // 按班级名称进行排序\r\n          res.data.sort((a, b) => a.class_name.localeCompare(b.class_name));\r\n          this.renderChart(res.data);\r\n        } else {\r\n          this.$message.error(res.msg);\r\n        }\r\n      });\r\n    },\r\n    loadDistributionByClass() {  // Add this method\r\n      if (this.user.role !== 'ADMIN') return;\r\n      this.$request.get('/score/distribution-by-class', {\r\n        params: {\r\n          courseId: this.courseId\r\n        }\r\n      }).then(res => {\r\n        if (res.code === '200') {\r\n          this.distributionData = res.data;\r\n          const classNames = this.distributionData.map(item => this.getClassNameById(item.classId));\r\n          const seriesData = [\r\n            { name: '优秀', type: 'bar', data: this.distributionData.map(item => item.excellent) },\r\n            { name: '良好', type: 'bar', data: this.distributionData.map(item => item.good) },\r\n            { name: '中等', type: 'bar', data: this.distributionData.map(item => item.average) },\r\n            { name: '及格', type: 'bar', data: this.distributionData.map(item => item.pass) },\r\n            { name: '不及格', type: 'bar', data: this.distributionData.map(item => item.fail) }\r\n          ];\r\n          this.renderChart('distribution-chart', '各班级成绩分布图', classNames, seriesData);\r\n        } else {\r\n          this.$message.error(res.msg);\r\n        }\r\n      });\r\n    },\r\n    getClassNameById(classId) {\r\n      const classItem = this.courseData.find(item => item.id === classId);\r\n      return classItem ? classItem.name : '';\r\n    },\r\n    renderChart(chartId, title, xData, seriesData) {\r\n      const chart = echarts.init(document.getElementById(chartId));\r\n      const option = {\r\n        title: { text: title },\r\n        tooltip: { trigger: 'axis' },\r\n        legend: { data: seriesData.map(s => s.name) },\r\n        xAxis: { type: 'category', data: xData },\r\n        yAxis: { type: 'value' },\r\n        series: seriesData\r\n      };\r\n      chart.setOption(option);\r\n    },\r\n    load() {  // 分页查询 通过输入页数来获取分页的数据\r\n      this.loadAverageScores();  // 查询按钮点击后加载对应课程的平均分图表数据\r\n      this.loadDistributionData(); // 加载成绩分布数据\r\n    },\r\n    reset() { //重置方法（查询旁边的按钮）清空输入框，返回第一页\r\n      this.courseId = 1;  // 重置为默认的courseId\r\n      this.loadAverageScores();  // 重新加载默认的图表数据\r\n      this.loadDistributionData();  // 重置时重新加载成绩分布数据\r\n    },\r\n    handleCurrentChange(pageNum) {\r\n      this.load(pageNum)\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}